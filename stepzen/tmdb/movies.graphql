type Movie {
  adult: Boolean
  backdrop_path: String
  belongs_to_collection: String
  budget: Int
  genres: [Genre]
  homepage: String
  id: Int!
  original_language: String
  original_title: String
  overview: String
  popularity: Int
  poster_path: String
  production_companies: [Company]
  production_countries: [Country]
  release_date: Date
  revenue: Int
  runtime: Int
  spoken_languages: [Language]
  status: String
  tagline: String
  title: String
  video: Boolean
  vote_average: Int
  vote_count: Int

  images: Images @materializer (query: "movieImages", arguments: [{name: "movieId", field: "id"}])
  videos: [VideoLink] @materializer (query: "movieVideos", arguments: [{name: "movieId", field: "id"}])
  credits: Credits @materializer (query: "movieCredits", arguments: [{name: "movieId", field: "id"}])
  social: SocialLinks @materializer (query: "socialLinks", arguments: [{name: "movieId", field: "id"}])
  similar: [ListItem] @materializer (query: "similarMovies", arguments: [{name: "movieId", field: "id"}])

  is_favourite(userId: String!): Boolean @materializer (query: "isFavourite", arguments: [{name: "mediaId", field: "id"}, { name: "userId", argument: "userId" }])
  favourites: Count @materializer (query: "favouritesCount", arguments: [{name: "mediaId", field: "id"}])
}

type Query {

  """
  Get the movie details
  """
  movie(movieId: Int!): Movie
    @rest(
      endpoint: "https://api.themoviedb.org/3/movie/$movieId"
      headers: [{ name: "authorization", value: "$authorization;" }]
      configuration: "curl_import_config"
    )
    
  """
  Get all the images related with the movie. Transforms is used the convert the file path to absolute url. Eg. "/9eAn20y26wtB3aet7w9lHjuSgZ3.jpg" to "https://image.tmdb.org/t/p/w1280/9eAn20y26wtB3aet7w9lHjuSgZ3.jpg"
  """
  movieImages(movieId: Int!) : Images
    @rest(
      endpoint: "https://api.themoviedb.org/3/movie/$movieId/images"
      headers: [{ name: "authorization", value: "$authorization;" }]
      configuration: "curl_import_config"
      transforms: [
        {pathpattern:["backdrops"],editor:"jq:.[]|.+={ file: { original: \"https://image.tmdb.org/t/p/original\\(.file_path)\", large: \"https://image.tmdb.org/t/p/w1280\\(.file_path)\", medium: \"https://image.tmdb.org/t/p/w780\\(.file_path)\", small: \"https://image.tmdb.org/t/p/w300\\(.file_path)\" } }"}
        {pathpattern:["logos"],editor:"jq:.[]|.+={ file: { original: \"https://image.tmdb.org/t/p/original\\(.file_path)\", large: \"https://image.tmdb.org/t/p/w500\\(.file_path)\", medium: \"https://image.tmdb.org/t/p/w185\\(.file_path)\", small: \"https://image.tmdb.org/t/p/w92\\(.file_path)\" } }"}
        {pathpattern:["posters"],editor:"jq:.[]|.+={ file: { original: \"https://image.tmdb.org/t/p/original\\(.file_path)\", large: \"https://image.tmdb.org/t/p/w780\\(.file_path)\", medium: \"https://image.tmdb.org/t/p/w342\\(.file_path)\", small: \"https://image.tmdb.org/t/p/w154\\(.file_path)\" } }"}
      ]
    )

  """
  Get all videos associated with a movie
  """
  movieVideos(movieId: Int!) : [VideoLink]
    @rest(
      endpoint: "https://api.themoviedb.org/3/movie/$movieId/videos"
      headers: [{ name: "authorization", value: "$authorization;" }]
      configuration: "curl_import_config"
      resultroot: "results[]"
    )

  """
  Get all casts and crew members of a movie.
  """
  movieCredits(movieId: Int!) : Credits
    @rest(
      endpoint: "https://api.themoviedb.org/3/movie/$movieId/credits"
      headers: [{ name: "authorization", value: "$authorization;" }]
      configuration: "curl_import_config"
      transforms: [
        {pathpattern:["cast"],editor:"jq:.[]|.+={ profile: { original: \"https://image.tmdb.org/t/p/original\\(.profile_path)\", large: \"https://image.tmdb.org/t/p/w300\\(.profile_path)\", medium: \"https://image.tmdb.org/t/p/w185\\(.profile_path)\", small: \"https://image.tmdb.org/t/p/w45\\(.profile_path)\" } }"}
        {pathpattern:["crew"],editor:"jq:.[]|.+={ profile: { original: \"https://image.tmdb.org/t/p/original\\(.profile_path)\", large: \"https://image.tmdb.org/t/p/w300\\(.profile_path)\", medium: \"https://image.tmdb.org/t/p/w185\\(.profile_path)\", small: \"https://image.tmdb.org/t/p/w45\\(.profile_path)\" } }"}
      ]
    )

  """
  Get all movies similar to the given movie
  """
  similarMovies(movieId: Int!) : [ListItem]
    @rest(
      endpoint: "https://api.themoviedb.org/3/movie/$movieId/similar"
      headers: [{ name: "authorization", value: "$authorization;" }]
      configuration: "curl_import_config"
      transforms: [
        {pathpattern:["results"],editor:"jq:.[]|.+={ poster: { original: \"https://image.tmdb.org/t/p/original\\(.poster_path)\", large: \"https://image.tmdb.org/t/p/w780\\(.poster_path)\", medium: \"https://image.tmdb.org/t/p/w342\\(.poster_path)\", small: \"https://image.tmdb.org/t/p/w154\\(.poster_path)\" } }"}
      ]
      resultroot: "results[]"
    )

  """
  Get all social media links of a given movie. ecmascript is used to get the full urls base on the id
  """
  socialLinks(movieId: Int!): SocialLinks
    @rest(
      endpoint: "https://api.themoviedb.org/3/movie/$movieId/external_ids"
      headers: [{ name: "authorization", value: "$authorization;" }]
      configuration: "curl_import_config"
      ecmascript: """
        function transformREST(s){
            let result = JSON.parse(s);
            let output = {};
            if(result.imdb_id)
                output.imdb = `https://www.imdb.com/title/${result.imdb_id}/`;
            if(result.facebook_id)
                output.facebook = `https://www.facebook.com/${result.facebook_id}`;
            if(result.instagram_id)
                output.instagram = `https://www.instagram.com/${result.instagram_id}`;
            if(result.twitter_id)
                output.twitter = `https://twitter.com/${result.twitter_id}`;
            return output;
        }
      """
    )
    
  """
  Get list of movies currently in theatres
  """
  nowPlaying: [ListItem]
    @rest(
      endpoint: "https://api.themoviedb.org/3/movie/now_playing"
      headers: [{ name: "authorization", value: "$authorization;" }]
      configuration: "curl_import_config"
      transforms: [
        {pathpattern:["results"],editor:"jq:.[]|.+={ poster: { original: \"https://image.tmdb.org/t/p/original\\(.poster_path)\", large: \"https://image.tmdb.org/t/p/w780\\(.poster_path)\", medium: \"https://image.tmdb.org/t/p/w342\\(.poster_path)\", small: \"https://image.tmdb.org/t/p/w154\\(.poster_path)\" } }"}
        {pathpattern:["results"],editor:"jq:.[]|.+={ media_type: \"movie\" }"}
      ]
      resultroot: "results[]"
    )
  
}